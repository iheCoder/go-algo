package total_cost_to_hire_k_workers

import (
	"sort"
	"testing"
)

func TestRandomSelectSum(t *testing.T) {
	t.Log(1<<31 - 1)
	t.Log(len(longCosts))
	t.Log(526355 - 523545)

	a := []int{3, 6, 1, 8, 2, 9}
	sum := randomizedSelectSum(a, 3)
	t.Log(sum)

	sum = 0
	for i := 0; i < len(longCosts); i++ {
		sum += longCosts[i]
	}
	t.Log(sum)

	a = []int{69, 10, 63, 24, 1, 71, 55, 46, 4, 61, 78, 21, 85, 52, 83, 77, 42, 21, 73, 2, 80, 99, 98, 89, 55, 94, 63, 50, 43, 62, 14}
	sort.Ints(a)
	sum = 0
	for i := 0; i < 21; i++ {
		sum += a[i]
	}
	t.Log(sum)

	a = []int{69, 10, 63, 24, 1, 71, 55, 46, 4, 61, 78, 21, 85, 52, 83, 77, 42, 21, 73, 2, 80, 99, 98, 89, 55, 94, 63, 50, 43, 62, 14}
	sum = randomizedSelectSum(a, 21)
	t.Log(sum)
}

type testData struct {
	costs      []int
	k          int
	candidates int
	expected   int64
}

func TestTC(t *testing.T) {
	tds := []testData{
		{
			costs:      []int{69, 10, 63, 24, 1, 71, 55, 46, 4, 61, 78, 21, 85, 52, 83, 77, 42, 21, 73, 2, 80, 99, 98, 89, 55, 94, 63, 50, 43, 62, 14},
			k:          21,
			candidates: 31,
			expected:   829,
		},
		{
			costs:      []int{17, 12, 10, 2, 7, 2, 11, 20, 8},
			k:          3,
			candidates: 4,
			expected:   11,
		},
		{
			costs:      []int{1, 2, 4, 1},
			k:          3,
			candidates: 4,
			expected:   4,
		},
		{
			costs:      []int{1, 2, 4, 1},
			k:          4,
			candidates: 4,
			expected:   8,
		},
		{
			costs:      []int{4, 3, 5, 2, 1},
			k:          3,
			candidates: 2,
			expected:   6,
		},
		{
			costs:      []int{1, 1, 1, 2, 2, 2, 1, 1, 1},
			k:          3,
			candidates: 2,
			expected:   3,
		},
		{
			costs:      longCosts,
			k:          222,
			candidates: 2,
			expected:   523545,
		},
	}

	for i, td := range tds {
		r := totalCost(td.costs, td.k, td.candidates)
		if td.expected != r {
			t.Fatalf("index %d expect %v got %v", i, td.expected, r)
		}
	}
}

var longCosts = []int{211, 169, 4359, 2335, 3956, 658, 1371, 1516, 4637, 2588, 4166, 250, 4866, 3122, 1197, 61, 292, 1616, 4857, 4067, 1428, 4912, 3071, 3108, 2221, 1932, 4183, 4101, 727, 2715, 64, 357, 1186, 2444, 3766, 3978, 1962, 1648, 871, 2961, 1164, 4792, 1528, 2064, 2653, 179, 2780, 3732, 2881, 1165, 623, 362, 2371, 1353, 4219, 4438, 3765, 4567, 1372, 4669, 1496, 3353, 4147, 33, 4378, 4634, 1331, 3014, 3723, 3271, 433, 1065, 2345, 4445, 4077, 2708, 1303, 2666, 3311, 1546, 3078, 4467, 1683, 414, 4282, 3510, 478, 2858, 4805, 1113, 783, 3999, 2685, 1025, 3111, 2394, 2985, 2693, 1068, 1806, 690, 4867, 4178, 1726, 1680, 1860, 155, 96, 1500, 4250, 286, 4145, 771, 1728, 2677, 353, 1163, 4876, 2066, 3910, 2578, 1298, 3321, 3236, 1152, 3140, 2294, 2200, 69, 3027, 3675, 3594, 74, 3575, 2279, 4874, 1071, 3085, 1786, 4596, 1584, 42, 411, 3962, 2704, 4411, 1926, 1300, 4533, 2119, 3924, 1034, 128, 911, 4717, 4767, 1669, 3669, 2936, 2099, 3395, 2487, 2539, 4722, 122, 642, 4680, 4813, 708, 4938, 4156, 1152, 2789, 699, 4724, 4159, 1766, 2662, 492, 2612, 330, 2010, 458, 161, 794, 2062, 4281, 717, 3486, 3331, 474, 4734, 1869, 4817, 2796, 1511, 146, 3857, 3471, 3674, 45, 519, 3035, 3830, 4566, 957, 4705, 3194, 1524, 2668, 903, 2833, 2118, 929, 266, 1177, 3297, 1681, 400, 2635, 1962, 1682, 2116, 603, 1521}
